[uwsgi]
module = run:app
;socket = 0.0.0.0:5002              ; Se utiliza cuando se tiene un proxy como nginx
chmod-socket = 660

# HTTP serving avoids the need for an Nginx container
http-socket = 0.0.0.0:5002
http-enable-proxy-protocol = 1
http-auto-chunked = true
http-keepalive = 75
http-timeout = 75

# Better startup/shutdown in docker:
die-on-term = true                   ; Shutdown when receiving SIGTERM (default is respawn)
lazy-apps = false
need-app = true
no-defer-accept = true

# Avoid errors on aborted client connections
ignore-sigpipe = true
ignore-write-errors = true
disable-write-exception = true

# Better behavior
strict = true
master = true
enable-threads = true
;py-call-osafterfork = true          ; comentado porque arroja errores
vacuum = true                        ; Delete sockets during shutdown
single-interpreter = true

processes = 3                        ; Maximum number of workers allowed
disable-logging = true               ; Disable built-in logging 
log-4xx = true                       ; but log 4xx's anyway
log-5xx = true                       ; and 5xx's
harakiri = 60                        ; forcefully kill workers after 60 seconds

# Worker Recycling
max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 2048                 ; Restart workers after this much resident memory (mb)
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers

;Fuentes:
;  https://www.techatbloomberg.com/blog/configuring-uwsgi-production-deployment/
;  https://github.com/nginxinc/kubernetes-ingress/issues/143